# pip install pillow
import tkinter as tk
from tkinter import simpledialog, messagebox
from PIL import Image, ImageTk
import json
import os
import random

SAVE_FILE = "pet_save.json"


class Pet:
    def __init__(self, name, pet_type="–°–æ–±–∞–∫–∞", hunger=5, happiness=5):
        self.name = name
        self.pet_type = pet_type  # "–ö–æ—à–∫–∞" –∏–ª–∏ "–°–æ–±–∞–∫–∞"
        self.hunger = hunger
        self.happiness = happiness

    def feed(self):
        self.hunger = min(self.hunger + 1, 10)

    def play(self):
        self.happiness = min(self.happiness + 1, 10)

    def hunger_decay(self):
        self.hunger = max(self.hunger - 1, 0)

    def happiness_decay(self):
        self.happiness = max(self.happiness - 1, 0)

    def get_status(self):
        mood = "üòÑ" if self.happiness > 5 else "üò¢"
        hunger_state = "üçó" if self.hunger > 5 else "ü•∫"
        return f"{self.name} ({self.pet_type}) {mood} {hunger_state}\n–°—ã—Ç–æ—Å—Ç—å: {self.hunger}/10\n–°—á–∞—Å—Ç—å–µ: {self.happiness}/10"

    def to_dict(self):
        return {
            "name": self.name,
            "pet_type": self.pet_type,
            "hunger": self.hunger,
            "happiness": self.happiness
        }

    @staticmethod
    def from_dict(data):
        return Pet(data["name"], data.get("pet_type", "–°–æ–±–∞–∫–∞"), data["hunger"], data["happiness"])


class PetApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üêæ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü")

        if os.path.exists(SAVE_FILE):
            with open(SAVE_FILE, "r") as f:
                data = json.load(f)
                self.pet = Pet.from_dict(data)
        else:
            name = simpledialog.askstring("–ò–º—è", "–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º –ø–∏—Ç–æ–º—Ü–∞?")
            pet_type = simpledialog.askstring("–í—ã–±–æ—Ä", "–ö–æ–≥–æ –∑–∞–≤–µ—Å—Ç–∏? –ö–æ—à–∫–∞ –∏–ª–∏ –°–æ–±–∞–∫–∞?")
            pet_type = pet_type.capitalize() if pet_type else "–°–æ–±–∞–∫–∞"
            if pet_type not in ["–ö–æ—à–∫–∞", "–°–æ–±–∞–∫–∞"]:
                pet_type = "–°–æ–±–∞–∫–∞"
            self.pet = Pet(name if name else "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π", pet_type)

        self.status_label = tk.Label(root, text=self.pet.get_status(), font=("Arial", 16), pady=20)
        self.status_label.pack()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–æ —Ç–∏–ø—É –ø–∏—Ç–æ–º—Ü–∞
        if self.pet.pet_type == "–ö–æ—à–∫–∞":
            self.happy_image = ImageTk.PhotoImage(Image.open("cat_happy.png").resize((150, 150)))
            self.sad_image = ImageTk.PhotoImage(Image.open("cat_sad.png").resize((150, 150)))
        else:
            self.happy_image = ImageTk.PhotoImage(Image.open("dog_happy.png").resize((150, 150)))
            self.sad_image = ImageTk.PhotoImage(Image.open("dog_sad.png").resize((150, 150)))

        self.image_label = tk.Label(root, image=self.happy_image)
        self.image_label.pack()

        # –ö–Ω–æ–ø–∫–∏
        tk.Button(root, text="üçó –ö–æ—Ä–º–∏—Ç—å", command=self.feed_pet, width=30).pack(pady=5)
        tk.Button(root, text="üéæ –ò–≥—Ä–∞—Ç—å", command=self.play_with_pet, width=30).pack(pady=5)
        tk.Button(root, text="üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", command=self.mini_game, width=30).pack(pady=5)
        tk.Button(root, text="‚úä –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", command=self.rps_game, width=30).pack(pady=5)
        tk.Button(root, text="‚ö° –ë—ã—Å—Ç—Ä—ã–π –∫–ª–∏–∫", command=self.quick_click_game, width=30).pack(pady=5)
        tk.Button(root, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_game, width=30).pack(pady=5)
        tk.Button(root, text="üö™ –í—ã—Ö–æ–¥", command=self.quit_game, width=30).pack(pady=20)

        self.update_gui()
        self.auto_hunger_decay()
        self.auto_happiness_decay()

    def quick_click_game(self):
        # –û–∫–Ω–æ –º–∏–Ω–∏-–∏–≥—Ä—ã
        game_window = tk.Toplevel(self.root)
        game_window.title("‚ö° –ë—ã—Å—Ç—Ä—ã–π –∫–ª–∏–∫")
        game_window.geometry("300x200")
        game_window.resizable(False, False)

        info_label = tk.Label(game_window, text="–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É!", font=("Arial", 12))
        info_label.pack(pady=10)

        clicked = {"value": False}

        def on_click():
            clicked["value"] = True
            self.pet.happiness = min(self.pet.happiness + 2, 10)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢—ã —É—Å–ø–µ–ª! –ü–∏—Ç–æ–º–µ—Ü —Å—á–∞—Å—Ç–ª–∏–≤ üòä")
            game_window.destroy()
            self.update_gui()

        def timeout():
            if not clicked["value"]:
                messagebox.showinfo("–£–ø—Å", "–¢—ã –Ω–µ —É—Å–ø–µ–ª üò¢")
                game_window.destroy()
                self.update_gui()


        click_button = tk.Button(game_window, text="–ñ–ú–ò!", font=("Arial", 14), command=on_click)
        click_button.pack(pady=20)
        game_window.after(1000, timeout)

    def update_gui(self):
        self.status_label.config(text=self.pet.get_status())
        if self.pet.happiness > 5:
            self.image_label.config(image=self.happy_image)
        else:
            self.image_label.config(image=self.sad_image)

    def auto_hunger_decay(self):
        self.pet.hunger_decay()
        self.update_gui()
        self.root.after(10000, self.auto_hunger_decay)

    def auto_happiness_decay(self):
        self.pet.happiness_decay()
        self.update_gui()
        self.root.after(20000, self.auto_happiness_decay)

    def feed_pet(self):
        self.pet.feed()
        self.update_gui()

    def play_with_pet(self):
        self.pet.play()
        self.update_gui()

    def mini_game(self):
        number = random.randint(1, 5)
        guess = simpledialog.askinteger("–ú–∏–Ω–∏-–∏–≥—Ä–∞", "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
        if guess == number:
            self.pet.happiness = min(self.pet.happiness + 3, 10)
            messagebox.showinfo("–ü–æ–±–µ–¥–∞!", f"–¢—ã —É–≥–∞–¥–∞–ª! –≠—Ç–æ –±—ã–ª–æ {number}")
        else:
            self.pet.happiness = min(self.pet.happiness - 2, 10)
            messagebox.showinfo("–ú–∏–º–æ", f"–ù–µ—Ç, —ç—Ç–æ –±—ã–ª–æ {number}")
        self.update_gui()

    def save_game(self):
        with open(SAVE_FILE, "w") as f:
            json.dump(self.pet.to_dict(), f)
        messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

    def quit_game(self):
        self.save_game()
        self.root.quit()

    def rps_game(self):
        options = ["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"]
        user_choice = simpledialog.askstring("–ò–≥—Ä–∞", "–í—ã–±–µ—Ä–∏: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞")
        if not user_choice:
            return

        user_choice = user_choice.capitalize()
        if user_choice not in options:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞")
            return

        bot_choice = random.choice(options)
        result = ""

        win_map = {
            "–ö–∞–º–µ–Ω—å": "–ù–æ–∂–Ω–∏—Ü—ã",
            "–ù–æ–∂–Ω–∏—Ü—ã": "–ë—É–º–∞–≥–∞",
            "–ë—É–º–∞–≥–∞": "–ö–∞–º–µ–Ω—å"
        }

        if user_choice == bot_choice:
            self.pet.happiness = min(self.pet.happiness + 0, 10)
            result = f"–ù–∏—á—å—è! –û–±–∞ –≤—ã–±—Ä–∞–ª–∏ {bot_choice}"
        elif win_map[user_choice] == bot_choice:
            self.pet.happiness = min(self.pet.happiness + 2, 10)
            result = f"–¢—ã –ø–æ–±–µ–¥–∏–ª! {user_choice} –±—å—ë—Ç {bot_choice}"
        else:
            self.pet.happiness = max(self.pet.happiness - 2, 0)
            result = f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. {bot_choice} –±—å—ë—Ç {user_choice}"

        messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", result)
        self.update_gui()


if __name__ == "__main__":
    root = tk.Tk()
    app = PetApp(root)
    root.mainloop()